%%{
    let cpsw_instance = system.modules["/networking/enet_cpsw/enet_cpsw"].$instances[0];
    let cpswScript = system.getScript("/networking/enet_cpsw/enet_cpsw");
    let ethphyScript = system.getScript("/board/ethphy_cpsw_icssg/ethphy_cpsw_icssg");
%%}
% let common = system.getScript("/common");
% let device = common.getDeviceName()
% if (cpsw_instance.customBoardEnable === false) {
% let module = system.modules["/board/ethphy_cpsw_icssg/ethphy_cpsw_icssg"];
% let instances = module.$instances;
% let uniqueDevices = ethphyScript.getUniqueLinkedEthphy(module);
% let linkedInstances = ethphyScript.getLinkedInstances(module);
% if(linkedInstances.length > 0) {
#include <stdint.h>
#include <enet.h>
% for (let phyDevice of uniqueDevices) {
#include <`phyDevice.toLowerCase()`.h>
% }
#include <enet_apputils.h>
#include <kernel/dpl/SystemP.h>
#include <kernel/dpl/AddrTranslateP.h>
#include <networking/enet/core/src/phy/enetphy_priv.h>
#include <drivers/gpio.h>
#include <board/eeprom.h>
#include "ti_board_open_close.h"
#include "ti_drivers_config.h"
#include <board/ioexp/ioexp_tca6424.h>

#define ENET_GET_NUM_MAC_ADDR(num) ((num>>3)+1)
#define ENET_MAC_ADDR_VALIDATE_MASK (0x01U)

#define MSS_CPSW_CONTROL_PORT_MODE_RMII                                   (0x1U)
#define MSS_CPSW_CONTROL_PORT_MODE_RGMII                                  (0x2U)

#include <drivers/i2c.h>

#define IO_EXPANDER_PORT0_OUTPUT_REG (0x04U)
#define IO_EXPANDER_PORT0_DIR_REG (0x0CU)
#define IO_EXPANDER_I2C_ADDR (0x22U)
#define ENET_BOARD_NUM_MACADDR_MAX (4U)
#define I2C_EEPROM_MAC_CTRL_OFFSET (0x40)
#define I2C_EEPROM_MAC_DATA_OFFSET (0x42)

static void EnetBoard_setMacPortIOExpanderCfg(void);

/* PHY drivers */
% for (let phyDevice of uniqueDevices){
extern Phy_DrvObj_t gEnetPhyDrv`common.camelSentence(phyDevice)`;
%}
extern Phy_DrvObj_t gEnetPhyDrvGeneric;


/*! \brief All the registered PHY specific drivers. */
static const EthPhyDrv_If gEnetPhyDrvs[] =
{
% for (let phyDevice of uniqueDevices){
    &gEnetPhyDrv`common.camelSentence(phyDevice)`,    /* `phyDevice` */
%}
    &gEnetPhyDrvGeneric,    /* Generic PHY - must be last */
};

const EnetPhy_DrvInfoTbl gEnetPhyDrvTbl =
{
    .numHandles = ENET_ARRAYSIZE(gEnetPhyDrvs),
    .hPhyDrvList = gEnetPhyDrvs,
};


/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */

static const EnetBoard_PortCfg *EnetBoard_getPortCfg(const EnetBoard_EthPort *ethPort);

static const EnetBoard_PortCfg *EnetBoard_findPortCfg(const EnetBoard_EthPort *ethPort,
                                                      const EnetBoard_PortCfg *ethPortCfgs,
                                                      uint32_t numEthPorts);

static void EnetBoard_setEnetControl(Enet_Type enetType,
                                     Enet_MacPort macPort,
                                     EnetMacPort_Interface *mii);

static void EnetBoard_enableExternalMux();

/* ========================================================================== */
/*                            Global Variables                                */
/* ========================================================================== */
% for (let idx of linkedInstances) {
/*!
 * \brief Common Processor Board (CPB) board's `instances[idx].phySelect` PHY configuration.
 */
% let phyName = (instances[idx].phySelect == "CUSTOM")? (instances[idx].customDeviceName) : (instances[idx].phySelect);
static const `common.camelSentence(phyName)`_Cfg gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg =
{
    % if(instances[idx].skipExtendedConfig == false) {
/* The delay values are set based on trial and error and not tuned per port of the evm */
	`instances[idx].extendedConfig`
    % }
};
%}

/*
 * SK AM62Ax LP board configuration.
 *
 * RMII/RGMII PHY connected to `device`
 */
static const EnetBoard_PortCfg gEnetCpbBoard_`device.replace('-','_')`_EthPort[] =
{
% for (let idx of linkedInstances) {
    {    /* "CPSW3G" */
        .enetType = ENET_CPSW_3G,
        .instId   = 0U,
        .macPort  = `instances[idx].peripheral.replace("CPSW", "ENET")`,
        .mii      = {`cpswScript.getMiiConfig(cpsw_instance).layerType`, `cpswScript.getMiiConfig(cpsw_instance).sublayerType`},
        .phyCfg   =
        {
            .phyAddr         = `instances[idx].phyAddr`,
            .isStrapped      = `instances[idx].isStrappedPhy`,
            .skipExtendedCfg = `instances[idx].skipExtendedConfig`,
			.extendedCfg     = &gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg,
			.extendedCfgSize = sizeof(gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg)
        },
        .flags    = 0U,
    },
%}
};

/* ========================================================================== */
/*                          Function Definitions                              */
/* ========================================================================== */

const EnetBoard_PhyCfg *EnetBoard_getPhyCfg(const EnetBoard_EthPort *ethPort)
{
    const EnetBoard_PortCfg *portCfg;

    portCfg = EnetBoard_getPortCfg(ethPort);

    return (portCfg != NULL) ? &portCfg->phyCfg : NULL;
}

static void EnetBoard_enableExternalMux()
{
    /* Enable external MUXes, if any, as per the board design */
}

static const EnetBoard_PortCfg *EnetBoard_getPortCfg(const EnetBoard_EthPort *ethPort)
{
    const EnetBoard_PortCfg *portCfg = NULL;

    if (ENET_NOT_ZERO(ethPort->boardId & ENETBOARD_CPB_ID) ||
        ((portCfg == NULL) && ENET_NOT_ZERO(ethPort->boardId & ENETBOARD_LOOPBACK_ID)))
    {
        portCfg = EnetBoard_findPortCfg(ethPort,
                                        gEnetCpbBoard_`device.replace('-','_')`_EthPort,
                                        ENETPHY_ARRAYSIZE(gEnetCpbBoard_`device.replace('-','_')`_EthPort));
    }
    return portCfg;
}

static const EnetBoard_PortCfg *EnetBoard_findPortCfg(const EnetBoard_EthPort *ethPort,
                                                      const EnetBoard_PortCfg *ethPortCfgs,
                                                      uint32_t numEthPorts)
{
    const EnetBoard_PortCfg *ethPortCfg = NULL;
    bool found = false;
    uint32_t i;

    for (i = 0U; i < numEthPorts; i++)
    {
        ethPortCfg = &ethPortCfgs[i];

        if ((ethPortCfg->enetType == ethPort->enetType) &&
            (ethPortCfg->instId == ethPort->instId) &&
            (ethPortCfg->macPort == ethPort->macPort) &&
            (ethPortCfg->mii.layerType == ethPort->mii.layerType) &&
            (ethPortCfg->mii.sublayerType == ethPort->mii.sublayerType))
        {
            found = true;
            break;
        }
    }

    return found ? ethPortCfg : NULL;
}

void EnetBoard_getMiiConfig(EnetMacPort_Interface *mii)
{
%if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
    mii->layerType      = ENET_MAC_LAYER_GMII;
    mii->variantType    = ENET_MAC_VARIANT_FORCED;
% } else {
    mii->layerType      = ENET_MAC_LAYER_MII;
    mii->variantType  = ENET_MAC_VARIANT_NONE;
%}
    mii->sublayerType   = ENET_MAC_SUBLAYER_REDUCED;
}

int32_t EnetBoard_setupPorts(EnetBoard_EthPort *ethPorts,
                             uint32_t numEthPorts)
{
    CSL_main_ctrl_mmr_cfg0Regs *regs = (CSL_main_ctrl_mmr_cfg0Regs *)(uintptr_t)CSL_CTRL_MMR0_CFG0_BASE;
    EnetAppUtils_MmrLockState prevLockState;

    DebugP_assert(numEthPorts == 1);
    DebugP_assert(ethPorts->mii.sublayerType == ENET_MAC_SUBLAYER_REDUCED);

    EnetBoard_enableExternalMux();
    /* Override the ENET control set by board lib */
    EnetBoard_setEnetControl(ethPorts->enetType, ethPorts->macPort, &ethPorts->mii);

    EnetBoard_setMacPortIOExpanderCfg();

    prevLockState = EnetAppUtils_mainMmrCtrl(ENETAPPUTILS_MMR_LOCK1, ENETAPPUTILS_UNLOCK_MMR);

    switch(ethPorts->macPort)
    {
        case ENET_MAC_PORT_1:
%if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
            CSL_FINS (regs->ENET1_CTRL, MAIN_CTRL_MMR_CFG0_ENET1_CTRL_PORT_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RGMII);
% } else {
            CSL_FINS (regs->ENET1_CTRL, MAIN_CTRL_MMR_CFG0_ENET1_CTRL_PORT_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RMII);
%}
            break;
        case ENET_MAC_PORT_2:
%if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
            CSL_FINS (regs->ENET2_CTRL, MAIN_CTRL_MMR_CFG0_ENET2_CTRL_PORT_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RGMII);
% } else {
            CSL_FINS (regs->ENET2_CTRL, MAIN_CTRL_MMR_CFG0_ENET2_CTRL_PORT_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RMII);
%}
            break;
        default:
            DebugP_assert(false);
    }

    if (prevLockState == ENETAPPUTILS_LOCK_MMR)
    {
        EnetAppUtils_mainMmrCtrl(ENETAPPUTILS_MMR_LOCK1, ENETAPPUTILS_LOCK_MMR);
    }

    /* Nothing else to do */
    return ENET_SOK;
}

static void EnetBoard_setEnetControl(Enet_Type enetType,
                                     Enet_MacPort macPort,
                                     EnetMacPort_Interface *mii)
{

}

void EnetBoard_getMacAddrList(uint8_t macAddr[][ENET_MAC_ADDR_LEN],
                              uint32_t maxMacEntries,
                              uint32_t *pAvailMacEntries)
{
    int32_t status = ENET_SOK;
    uint32_t macAddrCnt;
    uint32_t i;
    uint8_t macAddrBuf[ENET_BOARD_NUM_MACADDR_MAX * ENET_MAC_ADDR_LEN];
    uint8_t numMacMax;
    uint8_t validNumMac = 0;

    status = EEPROM_read(gEepromHandle[CONFIG_EEPROM0],  I2C_EEPROM_MAC_CTRL_OFFSET, &numMacMax, sizeof(uint8_t));
    EnetAppUtils_assert(status == ENET_SOK);
    EnetAppUtils_assert(ENET_GET_NUM_MAC_ADDR(numMacMax) <= ENET_BOARD_NUM_MACADDR_MAX);
    macAddrCnt = EnetUtils_min(ENET_GET_NUM_MAC_ADDR(numMacMax), maxMacEntries);

    EnetAppUtils_assert(pAvailMacEntries != NULL);

    status = EEPROM_read(gEepromHandle[CONFIG_EEPROM0], I2C_EEPROM_MAC_DATA_OFFSET, macAddrBuf, (macAddrCnt * ENET_MAC_ADDR_LEN));
    EnetAppUtils_assert(status == ENET_SOK);

    /* Save only those required to meet the max number of MAC entries */
    /* Validating that the MAC addresses from the EEPROM are not MULTICAST addresses */
    for (i = 0U; i < macAddrCnt; i++)
    {
        if(!(macAddrBuf[i * ENET_MAC_ADDR_LEN] & ENET_MAC_ADDR_VALIDATE_MASK)){
            memcpy(macAddr[validNumMac], &macAddrBuf[i * ENET_MAC_ADDR_LEN], ENET_MAC_ADDR_LEN);
            validNumMac++;
        }
    }

    *pAvailMacEntries = validNumMac;

    if (macAddrCnt == 0U)
    {
        EnetAppUtils_print("EnetBoard_getMacAddrList Failed - IDK not present\n");
        EnetAppUtils_assert(false);
    }
}

#define IO_EXP1_ADDR    0x22U
#define IO_EXP2_ADDR    0x23U

static void EnetBoard_setMacPortIOExpanderCfg(void)
{
    TCA6424_Config  TCA6424_Config;
    TCA6424_Params  TCA6424Params;
    int32_t status  = SystemP_SUCCESS;

    TCA6424Params.i2cInstance = 0U;
    TCA6424Params.i2cAddress  = IO_EXP1_ADDR;
    status = TCA6424_open(&TCA6424_Config, &TCA6424Params);

    /* !TODO: Change this to a TCA6424 driver API */
    const uint32_t rgmii1RstPin = 8*0 + 1; // PORT 0, PIN 1

    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_config(&TCA6424_Config, rgmii1RstPin,
                                    TCA6424_MODE_OUTPUT);
    }
    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_setOutput(&TCA6424_Config, rgmii1RstPin,
                                    TCA6424_OUT_STATE_LOW);
    }
    /* Wait for PHY to reset */
    ClockP_usleep(10);

    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_setOutput(&TCA6424_Config, rgmii1RstPin,
                                    TCA6424_OUT_STATE_HIGH);
    }
    if(status != SystemP_SUCCESS)
    {
        DebugP_logInfo("Unable to reset RGMII1 PHY \r\n");
    }


    TCA6424Params.i2cInstance = 0U;
    TCA6424Params.i2cAddress  = IO_EXP2_ADDR;
    status = TCA6424_open(&TCA6424_Config, &TCA6424Params);

    /* !TODO: Change this to a TCA6424 driver API */
    const uint32_t rgmii2RstPin = 8*2 + 2; // PORT 2, PIN 2

    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_config(&TCA6424_Config, rgmii2RstPin,
                                    TCA6424_MODE_OUTPUT);
    }
    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_setOutput(&TCA6424_Config, rgmii2RstPin,
                                    TCA6424_OUT_STATE_LOW);
    }
    /* Wait for PHY to reset */
    ClockP_usleep(10);
    if(status == SystemP_SUCCESS)
    {
        status = TCA6424_setOutput(&TCA6424_Config, rgmii2RstPin,
                                    TCA6424_OUT_STATE_HIGH);
    }
    if(status != SystemP_SUCCESS)
    {
        DebugP_logInfo("Unable to reset RGMII2 PHY \r\n");
    }

}
/*
 * Get ethernet board id
 */
uint32_t EnetBoard_getId(void)
{
    return ENETBOARD_AM62AX_EVM;
}

% }
% }