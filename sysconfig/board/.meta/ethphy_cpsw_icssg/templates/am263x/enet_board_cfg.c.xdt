%%{
    let cpsw_instance = system.modules["/networking/enet_cpsw/enet_cpsw"].$instances[0];
    let cpswScript = system.getScript("/networking/enet_cpsw/enet_cpsw");
    let ethphyScript = system.getScript("/board/ethphy_cpsw_icssg/ethphy_cpsw_icssg");
%%}
% let common = system.getScript("/common");
% let device = common.getDeviceName();

% if (cpsw_instance.customBoardEnable === false) {

% let module = system.modules["/board/ethphy_cpsw_icssg/ethphy_cpsw_icssg"];
% let instances = module.$instances;

% let uniqueDevices = ethphyScript.getUniqueLinkedEthphy(module);
% let linkedInstances = ethphyScript.getLinkedInstances(module);

% if(linkedInstances.length > 0) {
/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <stdint.h>
#include <enet.h>
% for (let phyDevice of uniqueDevices) {
#include "`phyDevice.toLowerCase()`.h"
% }
#include <enet_apputils.h>
#include <enet_appboardutils.h>
#include <drivers/hw_include/cslr_soc.h>
#include <networking/enet/core/src/phy/enetphy_priv.h>
#include <networking/enet/core/src/phy/generic_phy.h>
#include "ti_board_open_close.h"
#include <kernel/dpl/AddrTranslateP.h>

%if ((device === "am263x-cc") && (cpsw_instance.DisableMacPort2 === false) && (cpsw_instance.BoardType === "am263x-cc")){
#include <ti_drivers_config.h>
#include <drivers/i2c.h>

#define IO_EXPANDER_PORT0_OUTPUT_REG (0x02U)
#define IO_EXPANDER_PORT0_DIR_REG (0x06U)
#define IO_EXPANDER_I2C_ADDR (0x20U)

static void EnetBoard_setMacPort2IOExpanderCfg(void);
%}

/* PHY drivers */
% for (let phyDevice of uniqueDevices){
extern Phy_DrvObj_t gEnetPhyDrv`common.camelSentence(phyDevice)`;
%}
extern Phy_DrvObj_t gEnetPhyDrvGeneric;

/*! \brief All the registered PHY specific drivers. */
static const EthPhyDrv_If gEnetPhyDrvs[] =
{
% for (let phyDevice of uniqueDevices){
    &gEnetPhyDrv`common.camelSentence(phyDevice)`,    /* `phyDevice` */
%}
    &gEnetPhyDrvGeneric,   /* Generic PHY - must be last */
};

const EnetPhy_DrvInfoTbl gEnetPhyDrvTbl =
{
    .numHandles = ENET_ARRAYSIZE(gEnetPhyDrvs),
    .hPhyDrvList = gEnetPhyDrvs,
};

/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */

/**
   TPR:MSS_CTRL:CPSW_CONTROL

   Address offset    0x0000016C
   Physical address  0x0212016C
   Instance          MSS_CTRL
   CPSW_CONTROL_RGMII1_ID_MODE     16  Writing 1'b1 would disable the internal clock delays. And those delays need to be handled on board.
   CPSW_CONTROL_RMII_REF_CLK_OE_N  8   To select the rmii_ref_clk from PAD or from MSS_RCM. 0: clock will be from mss_rcm through IO internal loopback 1: will be from
   CPSW_CONTROL_PORT1_MODE_SEL     2:0 Port 1 Interface
                                         00 = GMII/MII
                                         01 = RMII
                                         10 = RGMII
                                         11 = Not Supported
*/

#define MSS_CPSW_CONTROL_PORT_MODE_MII                                   (0x0U)
#define MSS_CPSW_CONTROL_PORT_MODE_RMII                                  (0x1U)
#define MSS_CPSW_CONTROL_PORT_MODE_RGMII                                 (0x2U)

#define I2C_EEPROM_MAC_DATA_OFFSET                                        (0x3D)
#define I2C_EEPROM_MAC_CTRL_OFFSET                                        (0x3B)

#define ENET_BOARD_NUM_MACADDR_MAX                                        (3U)
#define ENET_GET_NUM_MAC_ADDR(num) ((num>>3)+1)
#define ENET_MAC_ADDR_VALIDATE_MASK (0x01U)
/* ========================================================================== */
/*                         Structure Declarations                             */
/* ========================================================================== */

/* None */

/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */

static const EnetBoard_PortCfg *EnetBoard_getPortCfg(const EnetBoard_EthPort *ethPort);

static const EnetBoard_PortCfg *EnetBoard_findPortCfg(const EnetBoard_EthPort *ethPort,
                                                      const EnetBoard_PortCfg *ethPortCfgs,
                                                      uint32_t numEthPorts);

static void EnetBoard_enableExternalMux();

/* ========================================================================== */
/*                            Global Variables                                */
/* ========================================================================== */

% for (let idx of linkedInstances) {
/*!
 * \brief Common Processor Board (CPB) board's `instances[idx].phySelect` PHY configuration.
 */
% let phyName = (instances[idx].phySelect == "CUSTOM")? (instances[idx].customDeviceName) : (instances[idx].phySelect);
static const `common.camelSentence(phyName)`_Cfg gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg =
{
    % if(instances[idx].skipExtendedConfig == false) {
	`instances[idx].extendedConfig`
    % }
};
%}

/*
 * `device` board configuration.
 *
 * RMII/RGMII/MII PHY connected to `device` CPSW_3G MAC port.
 */
static const EnetBoard_PortCfg gEnetCpbBoard_`device.replace('-','_')`_EthPort[] =
{
% for (let idx of linkedInstances) {
    {    /* "CPSW3G" */
        .enetType = ENET_CPSW_3G,
        .instId   = 0U,
        .macPort  = `instances[idx].peripheral.replace("CPSW", "ENET")`,
        .mii      = {`cpswScript.getMiiConfig(cpsw_instance).layerType`, `cpswScript.getMiiConfig(cpsw_instance).sublayerType`},
        .phyCfg   =
        {
            .phyAddr         = `instances[idx].phyAddr`,
            .isStrapped      = `instances[idx].isStrappedPhy`,
            .skipExtendedCfg = `instances[idx].skipExtendedConfig`,
			.extendedCfg     = &gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg,
			.extendedCfgSize = sizeof(gEnetCpbBoard_`common.camelSentence(instances[idx].$name)`PhyCfg)
        },
        .flags    = 0U,
    },
%}
};

/* ========================================================================== */
/*                          Function Definitions                              */
/* ========================================================================== */

const EnetBoard_PhyCfg *EnetBoard_getPhyCfg(const EnetBoard_EthPort *ethPort)
{
    const EnetBoard_PortCfg *portCfg;

    portCfg = EnetBoard_getPortCfg(ethPort);

    return (portCfg != NULL) ? &portCfg->phyCfg : NULL;
}

static void EnetBoard_enableExternalMux()
{
%if (cpsw_instance.BoardType === "am263x-lp") {
    /* Enable the  External MUX selection. Applicable for AM263x LP E2 ver board.
     * Has no effect on AM263x LP E1 ver board.
     *
     * For AM263x-LP E2 board:
     *  - GPIO0_1 - RGMII1 MUX Enable PIN:
     *        HIGH to enable
     *        LOW  to disable
     *  - GPIO_58 - MII MUX Enable PIN:
     *        HIGH to enable
     *        LOW  to disable
     */

    uint32_t rgmii1MuxEnPinAddr = (uint32_t) AddrTranslateP_getLocalAddr(CONFIG_GPIO1_BASE_ADDR);
    uint32_t miiMuxEnPinAddr    = (uint32_t) AddrTranslateP_getLocalAddr(CONFIG_GPIO58_BASE_ADDR);

    GPIO_setDirMode(rgmii1MuxEnPinAddr, CONFIG_GPIO1_PIN, CONFIG_GPIO1_DIR);
    GPIO_setDirMode(miiMuxEnPinAddr, CONFIG_GPIO58_PIN, CONFIG_GPIO58_DIR);
    GPIO_pinWriteHigh(rgmii1MuxEnPinAddr, CONFIG_GPIO1_PIN);
    GPIO_pinWriteHigh(miiMuxEnPinAddr, CONFIG_GPIO58_PIN);
%} else {
    /* Enable external MUXes, if any, as per the board design */
%}
}

static const EnetBoard_PortCfg *EnetBoard_getPortCfg(const EnetBoard_EthPort *ethPort)
{
    const EnetBoard_PortCfg *portCfg = NULL;

    if (ENET_NOT_ZERO(ethPort->boardId & ENETBOARD_CPB_ID) ||
        ((portCfg == NULL) && ENET_NOT_ZERO(ethPort->boardId & ENETBOARD_LOOPBACK_ID)))
    {
        portCfg = EnetBoard_findPortCfg(ethPort,
                                        gEnetCpbBoard_`device.replace('-','_')`_EthPort,
                                        ENETPHY_ARRAYSIZE(gEnetCpbBoard_`device.replace('-','_')`_EthPort));                                        
    }

    return portCfg;
}

static const EnetBoard_PortCfg *EnetBoard_findPortCfg(const EnetBoard_EthPort *ethPort,
                                                      const EnetBoard_PortCfg *ethPortCfgs,
                                                      uint32_t numEthPorts)
{
    const EnetBoard_PortCfg *ethPortCfg = NULL;
    bool found = false;
    uint32_t i;

    for (i = 0U; i < numEthPorts; i++)
    {
        ethPortCfg = &ethPortCfgs[i];

        if ((ethPortCfg->enetType == ethPort->enetType) &&
            (ethPortCfg->instId == ethPort->instId) &&
            (ethPortCfg->macPort == ethPort->macPort) &&
            (ethPortCfg->mii.layerType == ethPort->mii.layerType) &&
            (ethPortCfg->mii.sublayerType == ethPort->mii.sublayerType))
        {
            found = true;
            break;
        }
    }

    return found ? ethPortCfg : NULL;
}

void EnetBoard_getMiiConfig(EnetMacPort_Interface *mii)
{
%if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
    mii->layerType      = ENET_MAC_LAYER_GMII;
    mii->variantType    = ENET_MAC_VARIANT_FORCED;
    mii->sublayerType   = ENET_MAC_SUBLAYER_REDUCED;
 % } else if (cpsw_instance.phyToMacInterfaceMode == "MII") {
     mii->layerType     = ENET_MAC_LAYER_MII;
     mii->variantType   = ENET_MAC_VARIANT_NONE;
     mii->sublayerType  = ENET_MAC_SUBLAYER_STANDARD;
% } else {
    mii->layerType      = ENET_MAC_LAYER_MII;
    mii->variantType    = ENET_MAC_VARIANT_NONE;
    mii->sublayerType   = ENET_MAC_SUBLAYER_REDUCED;
%}

}

int32_t EnetBoard_setupPorts(EnetBoard_EthPort *ethPorts,
                             uint32_t numEthPorts)
{
    CSL_mss_ctrlRegs *mssCtrlRegs = (CSL_mss_ctrlRegs *)CSL_MSS_CTRL_U_BASE;

    DebugP_assert(numEthPorts == 1);


    EnetBoard_enableExternalMux();

    switch(ethPorts->macPort)
    {
        case ENET_MAC_PORT_1:
 % if (cpsw_instance.phyToMacInterfaceMode == "MII") {
     CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT1_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_MII);
% } else if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_RGMII1_ID_MODE, `Number(cpsw_instance.disableRgmiiIntDelay1)`U);
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT1_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RGMII);
% } else {
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT1_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RMII);
%}
            break;
        case ENET_MAC_PORT_2:
% if (cpsw_instance.phyToMacInterfaceMode == "MII") {
                 CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT2_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_MII);
% } else if (cpsw_instance.phyToMacInterfaceMode == "RGMII") {
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_RGMII2_ID_MODE, `Number(cpsw_instance.disableRgmiiIntDelay2)`U);
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT2_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RGMII);
% } else {
            CSL_FINS( mssCtrlRegs->CPSW_CONTROL,MSS_CTRL_CPSW_CONTROL_PORT2_MODE_SEL, MSS_CPSW_CONTROL_PORT_MODE_RMII);
%}
%if ((device === "am263x-cc") && (cpsw_instance.DisableMacPort2 === false) && (cpsw_instance.BoardType === "am263x-cc")){
            EnetBoard_setMacPort2IOExpanderCfg();
%}
            break;
        default:
            DebugP_assert(false);
    }

    /* Nothing else to do */
    return ENET_SOK;
}

%if ((device === "am263x-cc") && (cpsw_instance.DisableMacPort2 === false) && (cpsw_instance.BoardType === "am263x-cc")){
static void EnetBoard_setMacPort2IOExpanderCfg(void)
{
    I2C_Transaction i2cTransaction;
    uint8_t buffer[2];
    int32_t status = -1;

    I2C_Transaction_init(&i2cTransaction);
    i2cTransaction.writeBuf     = buffer;
    i2cTransaction.writeCount   = 2U;
    i2cTransaction.targetAddress = IO_EXPANDER_I2C_ADDR;

    /* Configure MDIO sel pin */
    /* Set output to high */
    buffer[0] = IO_EXPANDER_PORT0_OUTPUT_REG + 1; /* Port 1 */
    buffer[1] = (0x01 << 4); /* Pin 4 */
    I2C_transfer(I2C_getHandle(CONFIG_I2C1), &i2cTransaction);

    /* set pin to output */
    buffer[0] = IO_EXPANDER_PORT0_DIR_REG + 1;
    buffer[1] = ~(0x1 << 4);
    status = I2C_transfer(I2C_getHandle(CONFIG_I2C1), &i2cTransaction);
    DebugP_assert(status == I2C_STS_SUCCESS);

    /* Configure RGMII2 sel pin */
    /* Set output to low */
    buffer[0] = IO_EXPANDER_PORT0_OUTPUT_REG + 0; /* Port 0 */
    buffer[1] = ~(0x03 << 2); /* Pin 2 & 3 */
    I2C_transfer(I2C_getHandle(CONFIG_I2C1), &i2cTransaction);
    /* set pin to output */
    buffer[0] = IO_EXPANDER_PORT0_DIR_REG + 0;
    buffer[1] = ~(0x3 << 2);
    status = I2C_transfer(I2C_getHandle(CONFIG_I2C1), &i2cTransaction);
    DebugP_assert(status == I2C_STS_SUCCESS);

}
%}

void EnetBoard_getMacAddrList(uint8_t macAddr[][ENET_MAC_ADDR_LEN],
                              uint32_t maxMacEntries,
                              uint32_t *pAvailMacEntries)
{
    int32_t status = ENET_SOK;
    uint32_t macAddrCnt;
    uint32_t i;
    uint8_t numMacMax;
    uint8_t macAddrBuf[ENET_BOARD_NUM_MACADDR_MAX * ENET_MAC_ADDR_LEN];
    uint8_t validNumMac = 0U;

    status = EEPROM_read(gEepromHandle[CONFIG_EEPROM0],  I2C_EEPROM_MAC_CTRL_OFFSET, &numMacMax, sizeof(uint8_t));
    EnetAppUtils_assert(status == ENET_SOK);
    EnetAppUtils_assert(ENET_GET_NUM_MAC_ADDR(numMacMax) <= ENET_BOARD_NUM_MACADDR_MAX);
    EnetAppUtils_assert(pAvailMacEntries != NULL);

    macAddrCnt = EnetUtils_min(ENET_GET_NUM_MAC_ADDR(numMacMax), maxMacEntries);

    status = EEPROM_read(gEepromHandle[CONFIG_EEPROM0], I2C_EEPROM_MAC_DATA_OFFSET, macAddrBuf, (macAddrCnt * ENET_MAC_ADDR_LEN) );
    EnetAppUtils_assert(status == ENET_SOK);

    /* Save only those required to meet the max number of MAC entries */
    /* Validating that the MAC addresses from the EEPROM are not MULTICAST addresses */
    for (i = 0U; i < macAddrCnt; i++)
    {
        if(!(macAddrBuf[i * ENET_MAC_ADDR_LEN] & ENET_MAC_ADDR_VALIDATE_MASK)){
            memcpy(macAddr[validNumMac], &macAddrBuf[i * ENET_MAC_ADDR_LEN], ENET_MAC_ADDR_LEN);
            validNumMac++;
        }
    }

    *pAvailMacEntries = validNumMac;

    if (macAddrCnt == 0U)
    {
        EnetAppUtils_print("EnetBoard_getMacAddrList Failed - IDK not present\n");
        EnetAppUtils_assert(false);
    }
}

/*
 * Get ethernet board id
 */
uint32_t EnetBoard_getId(void)
{
    return ENETBOARD_AM263X_EVM;
}

% }
% }
